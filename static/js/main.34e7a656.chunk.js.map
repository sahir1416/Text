{"version":3,"sources":["componets/Body/textform/Textanalysis.js","componets/navbar/Navbar.js","componets/alerts/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Textanalysis","props","useState","text","setText","className","style","Color","mode","heading","id","value","backgroundColor","color","onChange","event","target","rows","type","onClick","newText","toUpperCase","showAlert","toLowerCase","charAt","slice","console","log","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Navbar","href","title","aboutText","placeholder","toggleMode","role","htmlFor","dMode","defaultProps","Alerts","alert","word","lower","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.34e7a656.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function Textanalysis(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"UpperCase Was Click\" + text);\r\n    // + text can access\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Coverted To UpperCase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Coverted To LowerCase\", \"success\");\r\n  };\r\n\r\n  const capitalize = () => {\r\n    let firstChar = text.charAt(1);\r\n    // let lastChar = text.charAt(2);\r\n    let newText = firstChar.toUpperCase(0);\r\n    //  + lastChar.toLowerCase(1);\r\n    setText(newText + text.slice(1));\r\n    props.showAlert(\"Coverted To Capitalize\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Clear\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"handle OnChange Was Click\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleCopy = () => {\r\n    console.log(\"I Am Copy\");\r\n    var text = document.getElementById(\"Text\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied To Clipboard!\", \"success\");\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\" Extra Space\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  //   text = \"New text\"; This Wrong way to change\r\n  //   SetText = \"New text\"; This Right way to change\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          Color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"Text\"\r\n            //   2nd method  defaultValue={text}\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"black\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            onChange={handleOnChange}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-3 mx-3\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert To Uppercase\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-secondary mb-3\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert To Lowecase\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-3 mx-3\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Convert To Clear\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-3 mx-3\"\r\n          onClick={capitalize}\r\n        >\r\n          Convert To Title\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-3 mx-3\"\r\n          onClick={handleCopy}\r\n        >\r\n          Convert To Copy\r\n        </button>\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary mb-3 mx-3\"\r\n          onClick={handleExtraSpace}\r\n        >\r\n          Remove Extra Space\r\n        </button>\r\n        {/* var str = toTitles('abraham lincoln'); // Abraham Lincoln */}\r\n      </div>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          Color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n        }}\r\n      >\r\n        <h2>Your Text Counting</h2>\r\n        {/* <p>232 words and 3458 characters</p> */}\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes To Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {/* <Link className=\"navbar-brand\" to=\"/\"> */}\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link disabled\" href=\"/\">\r\n                  Disabled\r\n                </a>\r\n              </li> */}\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link \" to=\"/contact\">\r\n                Contact Us\r\n              </Link> */}\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.dMode}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  aboutText: \"About Text Here\",\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Alerts(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong> {capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alerts;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\n// import Textform from \"./componets/Body/textform/Textform\";\nimport Textanalysis from \"./componets/Body/textform/Textanalysis\";\nimport Navbar from \"./componets/navbar/Navbar\";\n// import About from \"./componets/About/About\";\nimport React, { useState } from \"react\";\nimport Alerts from \"./componets/alerts/Alerts\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //Whether Dark Mode Is Unable Or Not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message, //We Also Used Message: Message Or Msg : Message\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"darkgray\";\n      document.body.style.color = \"white\";\n      showAlert(\"Dark Mode Has Been Enable\", \"success\");\n      document.title = \"Text - Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"Text Is Amazing Mode\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Please Install Text \";\n      // }, 1500);\n      //pls Never Used It Only Distraced The User\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\";\n      showAlert(\"Light Mode Has Been Enable\", \"success\");\n      document.title = \"Text - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar\n        title=\"Text\"\n        aboutText=\"About Us\"\n        mode={mode}\n        dMode=\"Unable Dark Mode\"\n        toggleMode={toggleMode}\n      />\n\n      <Alerts alert={alert} />\n\n      <div className=\"container my-4\">\n        {/* <Switch> */}\n        {/* users --> componet 1\n            users/home --> componet 2 */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n\n        {/* <Route exact path=\"/\"> */}\n        <Textanalysis\n          showAlert={showAlert}\n          heading=\"Enter Text In Here\"\n          mode={mode}\n        />\n        {/* </Route> */}\n        {/* </Switch> */}\n\n        {/* <About /> */}\n      </div>\n\n      <div className=\"container my-7\">\n        {/* <Textform heading=\"Enter You Email Address\" /> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}